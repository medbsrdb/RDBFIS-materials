version 1.2
@totalColumns 21
@permitEmpty
@ignoreColumnNameCase
// acoustics_sset_nasc_species
survey_name: any("MEDIAS")
cd_country: any("BGR","GRC","ESP","FRA","HRV","ITA","CYP","MLT","ROU","SVN")
gsa: any("GSA1","GSA2","GSA3","GSA4","GSA5","GSA6","GSA7","GSA8","GSA9","GSA10","GSA11.1","GSA11.2","GSA11","GSA12","GSA13","GSA14","GSA15","GSA16","GSA17","GSA18","GSA19","GSA20","GSA21","GSA22","GSA23","GSA24","GSA25","GSA26","GSA27","GSA28","GSA29","GSA30")
survey_area: any("AdrSea-HRV-IOR","AdrSea-ITA-IRBIM","AdrSea-SVN-FRIS","AegSea-GRC-IMBRIW","BSea-BGR-IO-BAS","BSea-ROU-NIMRD","EIonSea-GRC-IMBRIW","GLion-FRA-IFREMER","IberCoast-ESP-CNIEO","SardEast-ITA-IAS","SicChan-ITA-IAS","TyrLigSea-ITA-IAS")
geographical_stratum: any("Gulf of Lion","Central Adriatic Sea","North Adriatic Sea","South Adriatic Sea","IOR","NA","SRGRC-AMVRAKIKOSG","SRGRC-CHALKIDIKIG","SRGRC-CORINTHIAKOSG","SRGRC-ETHASSOS","SRGRC-KERKIRAIKOSG","SRGRC-NEVOIKOS","SRGRC-NIONIAN","SRGRC-PATRAIKOSG","SRGRC-SARONIKOSG","SRGRC-SEVOIKOS","SRGRC-SIONIAN","SRGRC-THERMAIKOSG","SRGRC-WTHASSOS") // up to 32 characters, NA if the geographical stratum is not available // regex("^(NA|.{1,32})$")
cd_centre: any("CNR-FRIS","IEO/CSIC","CNR","CSIC","FRIS","HCMR","IFREMER","IO-BAS","IOR","JRC","NIMRD","FAO","ICES")
cd_inst: switch(($cd_centre/is("CNR-FRIS"),is("IRBIM-FRIS")),($cd_centre/is("IEO/CSIC"),is("COB")),($cd_centre/is("CNR"),any("IAS","IRBIM")),($cd_centre/is("CSIC"),any("CNIEO","ICM")),($cd_centre/is("FRIS"),is("FRIS")),($cd_centre/is("HCMR"),is("IMBRIW")),($cd_centre/is("IFREMER"),is("IFREMER")),($cd_centre/is("IO-BAS"),is("IO-BAS")),($cd_centre/is("IOR"),is("IOR")),($cd_centre/is("NIMRD"),is("NIMRD")))
cd_vessel: any("BIO","EUR","PHI","AEG","DAL","MIO")
sampling_year: positiveInteger range(2003,2024)
cd_cruise: regex("^.{1,14}$") // non-empty string of up to 14 characters
calibration_id: positiveInteger range(1,10)
transect: positiveInteger range(1,999)
edsu_id: positiveInteger range(1,2000)
trawl_haul_reference: regex("^.{0,128}$") // string that is either empty or up to 128 characters
echo_type: any("E1","E2","E3","E4","E5","E6","E7","E8","E9","E10","E11","E12","E13","E14","E15","E16","E17","E18","E19","E20")
species: any("BVQ","ATB", "WHB","ANE","PIL","JAX","HMM","JAA","HOM","BOG","SAA","SAE","VMA","MAC","MAZ","SPC","PIC","SPR")
size_category: any("S","L","C") // set the length interval by size_category
abundance: regex("^(?=.*[1-9])(?:0\.\d{1,3}|[1-9]\d{0,10}(?:\.\d{1,3})?)$") // match real numbers >0, ensuring up to 11 digits before the decimal point and up to 3 digits after the decimal point-numeric(14,3)
biomass: regex("^(?:(?:0\.(?:0{0,3}[1-9]\d{0,3}))|(?:[1-9]\d{0,9}(?:\.\d{1,4})?))$") // real numbers >0, ensuring up to 10 digits before the decimal point and up to 4 digits after the decimal point-numeric(14,4)
species_b20: regex("^(-90|-8[0-9]|-7[0-9]|-6[0-9])(\.\d{1,2})?$") // real numbers between -90 and -60, inclusive, with at maximum 2 digits after the decimal point
species_nasc: regex("^(?:\d{1,4}|\d{1,4}\.\d{1,4})$") //real numbers â‰¥ 0 with at maximum 4 digits before the decimal point and at maximum 4 digits are allowed after the decimal point-numeric(8,4)
