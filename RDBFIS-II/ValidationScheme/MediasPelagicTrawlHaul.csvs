version 1.2
@totalColumns 26
@permitEmpty
@ignoreColumnNameCase
// Medias Pelagic Trawl Haul
survey_name: any("MEDIAS")
cd_country: any("BGR","GRC","ESP","FRA","HRV","ITA","CYP","MLT","ROU","SVN")
gsa: any("GSA1","GSA2","GSA3","GSA4","GSA5","GSA6","GSA7","GSA8","GSA9","GSA10","GSA11.1","GSA11.2","GSA11","GSA12","GSA13","GSA14","GSA15","GSA16","GSA17","GSA18","GSA19","GSA20","GSA21","GSA22","GSA23","GSA24","GSA25","GSA26","GSA27","GSA28","GSA29","GSA30")
survey_area: any("AdrSea-HRV-IOR","AdrSea-ITA-IRBIM","AdrSea-SVN-FRIS","AegSea-GRC-IMBRIW","BSea-BGR-IO-BAS","BSea-ROU-NIMRD","EIonSea-GRC-IMBRIW","GLion-FRA-IFREMER","IberCoast-ESP-CNIEO","SardEast-ITA-IAS","SicChan-ITA-IAS","TyrLigSea-ITA-IAS")
geographical_stratum: 
cd_centre: any("CNR-FRIS","IEO/CSIC","CNR","CSIC","FRIS","HCMR","IFREMER","IO-BAS","IOR","JRC","NIMRD","FAO","ICES")
cd_inst: switch(($cd_centre/is("CNR-FRIS"),is("IRBIM-FRIS")),($cd_centre/is("IEO/CSIC"),is("COB")),($cd_centre/is("CNR"),any("IAS","IRBIM")),($cd_centre/is("CSIC"),any("CNIEO","ICM")),($cd_centre/is("FRIS"),is("FRIS")),($cd_centre/is("HCMR"),is("IMBRIW")),($cd_centre/is("IFREMER"),is("IFREMER")),($cd_centre/is("IO-BAS"),is("IO-BAS")),($cd_centre/is("IOR"),is("IOR")),($cd_centre/is("NIMRD"),is("NIMRD")))
cd_vessel: any("CDS","BIO","EUR","PHI","AEG","DAL","MIO")
sampling_year: positiveInteger range(2009,2024) // new column
cd_cruise: length(*,14)
gear: any("P1MO4","4FF176","4PM159","ATGM47-43","OTM")
haul_id: length(*,14)
vhaul_id: length(*,64) // new column; equal to haul_id or combination of more than one haul_id separated by the symbol (-)
latitude: range(34.00,45.70) // ask for a box by survey area
longitude: range(-5.50,35.00) // ask for a box by survey area
bottom_depth_start: positiveInteger range(10,1500)
bottom_depth_end: positiveInteger range(10,1500)
sampling_date: regex("^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0,1,2])\/(19|20)\d{2}") // to be deleted
time_start: regex("^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/[0-9]{4} ([01][0-9]|2[0-3]):[0-5][0-9]$") // was changed to timestamp
time_end: regex("^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/[0-9]{4} ([01][0-9]|2[0-3]):[0-5][0-9]$") // was changed to timestamp
duration: positiveInteger range(10,180)
average_fishing_speed: regex("^(1\.[5-9]|[2-6](\.\d{1,2})?|7)(\.\d{1,2})?$") //Real numbers between 1.5 and 7 (inclusive) with at maximum 2 digits after the decimal point
net_average_depth: regex("^(-1|5|[6-9]|[1-7]\d{1,2}|8[0-9]|9[0-9]|800)(\.\d{1})?$") //Real numbers between 5 and 800 (inclusive) with at maximum 1 digit after the decimal point or -1 (the following regex cannot accept the range 80-89 regex("^(-1|5|[6-9]|[1-7]\d{1,2}|800)(\.\d{1})?$"), similar ^(-1|5|[6-7]|8[0-9]|[1-7]\d{1,2}|800)(\.\d{1})?$ accept 80-89 but not 90-99)
net_horizontal_opening: regex("^(-1|(?:5(?:\.\d{1,2})?|[6-9](?:\.\d{1,2})?|[1-2]\d(?:\.\d{1,2})?|3[0-4](?:\.\d{1,2})?|35(?:\.0{1,2})?))$") //Real numbers between 5 and 35 (inclusive) with at maximum 2 digits after the decimal point or -1
net_vertical_opening: regex("^(-1|1|[2-9]|1[0-9]|2[0-5])(\.\d{1,2})?$") //Real numbers between 1 and 25 (inclusive) with at maximum 2 digits after the decimal point or -1
calibration_id: regex("^(-1|[1-9][0-9]{0,2})$") // positive integer range(1,999) or -1
